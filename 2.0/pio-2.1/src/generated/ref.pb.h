/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_REF_PB_H_INCLUDED
#define PB_REF_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* These values will always be between -255 and 255 to correspond to Arduino's
 analogWrite(). The negative values are for rotating the motor backwards. */
typedef struct _MotorVals { 
    bool m1; 
    bool m2; 
    bool m3; 
    bool m4; 
    int32_t pa; 
    int32_t pb; 
} MotorVals;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define MotorVals_init_default                   {0, 0, 0, 0, 0, 0}
#define MotorVals_init_zero                      {0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define MotorVals_m1_tag                         1
#define MotorVals_m2_tag                         2
#define MotorVals_m3_tag                         3
#define MotorVals_m4_tag                         4
#define MotorVals_pa_tag                         5
#define MotorVals_pb_tag                         6

/* Struct field encoding specification for nanopb */
#define MotorVals_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     m1,                1) \
X(a, STATIC,   SINGULAR, BOOL,     m2,                2) \
X(a, STATIC,   SINGULAR, BOOL,     m3,                3) \
X(a, STATIC,   SINGULAR, BOOL,     m4,                4) \
X(a, STATIC,   SINGULAR, SINT32,   pa,                5) \
X(a, STATIC,   SINGULAR, SINT32,   pb,                6)
#define MotorVals_CALLBACK NULL
#define MotorVals_DEFAULT NULL

extern const pb_msgdesc_t MotorVals_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define MotorVals_fields &MotorVals_msg

/* Maximum encoded size of messages (where known) */
#define MotorVals_size                           20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
