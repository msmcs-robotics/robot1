/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_REF_PB_H_INCLUDED
#define PB_REF_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* These values will always be between -255 and 255 to correspond to Arduino's
 analogWrite(). The negative values are for rotating the motor backwards. */
typedef struct _MotorVoltage { 
    int32_t lv; 
    int32_t rv; 
} MotorVoltage;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define MotorVoltage_init_default                {0, 0}
#define MotorVoltage_init_zero                   {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define MotorVoltage_lv_tag                      1
#define MotorVoltage_rv_tag                      2

/* Struct field encoding specification for nanopb */
#define MotorVoltage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, SINT32,   lv,                1) \
X(a, STATIC,   SINGULAR, SINT32,   rv,                2)
#define MotorVoltage_CALLBACK NULL
#define MotorVoltage_DEFAULT NULL

extern const pb_msgdesc_t MotorVoltage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define MotorVoltage_fields &MotorVoltage_msg

/* Maximum encoded size of messages (where known) */
#define MotorVoltage_size                        12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
